swagger: "2.0"
info:
  version: 1.0.0
  title: Shipnow API
  description: |
    ShipNow exposes it's information using RESTful interface. Detailed
    documentation of every endpoint is available below.

    Making requests
    ---------------

     * Our production API is hosted at https://api.shipnow.com.ar.
     * Our testing API is hosted at https://api-staging.shipnow.com.ar.

    If you need to test your clients, feel free to pollute the testing API with
    test data, though keep in mind that it will be cleared every few hours.

    On occasions, testing may diverge slightly from production. This should not
    last long, since we generally deploy to one and quickly to the other. If you
    find such discrepancies, don't worry, since they should quickly propagate to
    production.

    Both APIs use HTTPS (ie: HTTP + TLS) exclusively. You MUST NOT attempt to reach
    them using raw HTTP.

    Authentication
    --------------

    Authentication is not yet done via OAuth, but a simpler password-based
    mechanism.

    Users will provide their username and password, which you will then exchange
    for a `Token` by `POST`ing to `/user/authentication`, using HTTP Basic
    Authentication (as defined in [rfc2617][rfc2617]). This will return the entire
    user object, which contains the user's token:

        {
            "id": 1,
            "email": "hugo@barrera.io",
            "token": "VXyuYdTflB9NY1KUMfcddDcAJeye4vfAv7cZg8m7qDNmhuZ3V6",
            "type": "human",
            "description": "Hugo",
            "role": "admin",
            "account": {},
            "avatar_url": null
        }

    This token should be included in every request header to operate on behalf of
    the user, inside the `Authorization` header, as follows:

        Token token=gNGQNzZ2muAdRKZT3miNccnwYxSrZ6zl2t1B6l6tcHpUw00pok

    You SHOULD NOT store user's username or password. You should only store the
    provided token.

    Accounts vs Users
    -----------------

    Each client has a single account, which in turn, has multiple users. An account
    will hold all orders and products for that client, which all users of that
    account can access (with different access levels).

    Each account can have as many users as they need.  Additional users can be
    created via the API or the sellers interface.

    Access Levels
    -------------

    Users can have three access levels:

     * ShipNow: These are internal account, that can access data for all clients,
       and are used internally when actually moving products around.
       You will generally never see these user types unless you're deploying
       the ShipNow app for your own warehouse.
     * Administrator: These are the top-level users for each account, and can
       create other users, as well as a few more special actions.
     * Regular: These are the lower-level users, which can create/edit orders,
       product, and use other day-to-day interfaces.
       Bot accounts should generally also be regular users.

    Data
    ----

    All data is sent and received using [JSON][json]. Request data will be
    contained inside a `results` object:

        {
            "results": [
               {
                  "id": 1,
                  "name": "sample object 1",
                  "created_at": "2017-12-14T15:42:12.898Z"
               }
            ]
        }

    In case of a 4XX or 5XX status code, errors MAY be included in an errors array:

        {
            "errors": [
                "Access Denied"
            ]
        }

    We adhere quite closely to [HTTP 1.1][http1.1], with one exception: When data
    validation fails, we will return a 422 status code.

    Contributing
    ------------

    This documentation is hosted publicly at [GitHub][github].  If you find any
    error or room for improvement, feel free to send a contribution.

    If you encounter any undocumented behaviours, or bugs in the API, please open an
    issue in this project's issue tracker. We'll update the documentation (or fix
    the underlying issue).

    Copyright (c) 2016 ShipNow SRL <developers@shipnow.com.ar>

    [json]: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
    [http1.1]: https://tools.ietf.org/html/rfc2616
    [github]: https://github.com/shipnow/docs
    [rfc2617]: https://tools.ietf.org/html/rfc2617#section-2
  contact:
    name: ShipNow API Team
    email: developers@shipnow.com.ar
    url: https://www.shipnow.com.ar
host: api-staging.shipnow.com.ar
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
security:
  - token: []
paths:
  /orders:
    get:
      description: |
        Returns all orders from the system to which the user has access. This
        will generally be all the orders for the account related to the current
        user.
      operationId: findOrders
      parameters:
        - name: status
          in: query
          description: filter by status
          required: false
          type: string
        - name: date_from
          in: query
          description: exclude orders created before this date
          required: false
          type: string
          format: date
        - name: date_to
          in: query
          description: exclude orders created after this date
          required: false
          type: string
          format: date
        - name: status_detail
          in: query
          description: filter by status_detail
          required: false
          type: string
          format: string
        - name: external_reference
          in: query
          description: find order with this external_reference
          required: false
          type: string
          format: string
        - name: carrier_code
          in: query
          description: filter by carrier_code
          required: false
          type: string
          format: string
        - name: store_id
          in: query
          description: filter by store
          required: false
          type: integer
          format: int32
        - name: sku
          in: query
          description: filter orders with the product with this sku
          required: false
          type: string
          format: string
        - name: tracking_number
          in: query
          description: find order with this tracking_number
          required: false
          type: string
          format: string
      responses:
        200:
          description: a list of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      description: |
        Creates a new order, and returns it with its new id.
      operationId: createOrder
      parameters:
        - $ref: '#/parameters/NewOrder'
      responses:
        200:
          description: The newly created order.
          schema:
            $ref: '#/definitions/Order'
        422:
          description: A list of validation errors.
  /orders/{id}:
    get:
      description: |
        Returns an order identified by id.
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: id of order to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: An Order.
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order with given id not found.
    put:
      description: |
        Update an existing order. Note that not all fields are editable at all
        times. Once orders have been packed, items and shipping data cannot be
        altered. Only certain status transitions are valid.
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: The id of the order to be updated.
          required: true
          type: integer
        - $ref: '#/parameters/Order'
      responses:
        200:
          description: The updated order.
          schema:
            $ref: '#/parameters/Order/schema'
    delete:
      description: |
        Deletes a single order based on the id supplied.
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: The id of order to delete.
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Order deleted.
  /products:
    get:
      description: |
        Returns all the products to which the user has access.
      operationId: findProducts
      parameters:
        - name: external_reference
          in: query
          description: Filter by this external_reference.
          required: false
          type: string
      responses:
        200:
          description: A list of zero or more products.
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
    post:
      description: |
        Creates a new product, and returns it with its new id.
      operationId: createProduct
      parameters:
        - $ref: '#/parameters/NewProduct'
      responses:
        200:
          description: The newly created product
          schema:
            $ref: '#/definitions/Product'
        422:
          description: A list of validation errors.
  /products/{id}/:
    get:
      description: |
        Returns a product identified by id.
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: The id of the product to fetch.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: A product.
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product with given id not found.
    put:
      description: |
        Update an existing product.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: The id of the product to be updated.
          required: true
          type: integer
        - $ref: '#/parameters/Product'
      responses:
        200:
          description: The updated product.
          schema:
            $ref: '#/parameters/Product/schema'
    delete:
      description: |
        Delete a single product based on the id supplied.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: The id of product to delete.
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Product deleted.
  /users/authentication:
    post:
      description: |
        Authenticates a user and returns an API-compatible token.
        Implementations should provide the username and password using HTTP
        Basic Auth (as defined in RFC2617).
      operationId: authenticateUser
      security:
        - auth: []
      responses:
        200:
          description: the user object
          schema:
            type: object
            allOf:
              - $ref: '#/parameters/User/schema'

# TODO: ordesr/shipments
# TODO: products
# TODO: users
# TODO: stores
# TODO: shipping_filters
# TODO: tracking

  /ping:
    get:
      description:
        Use this endpoint to test connectivity to the ShipNow API, response
        times, or debug other possible network-related issues.
      operationId: ping
      security: []
      responses:
        200:
          description: This endpoint will always return the string "pong".

securityDefinitions:
  token:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: Used for all non-public endpoints.
  auth:
    type: "basic"
    description: Used to obtain a per-user token.
parameters:
  NewOrder:
    in: body
    name: order
    schema:
      type: object
      required:
        - external_reference
        - ship_to
        - items
      properties:
        external_reference:
          type: string
          description: A free-form text to later find and search this order.
        ship_to:
          type: object
          required:
            - name
            - last_name
            - zip_code
            - address_line
            - city
            - email
          properties:
            name:
              type: string
            last_name:
              type: string
            phone:
              type: string
            zip_code:
              type: integer
            address_line:
              type: string
            street_name:
              type: string
            street_number:
              type: string
            unit:
              type: string
            floot:
              type: string
            city:
              type: string
            state:
              type: string
            email:
              type: string
        comment:
          type: string
        service_code:
          type: string
        carrier_code:
          type: string
        store_id:
          type: string
          description: the id of this order's store
        items:
          type: array
          description: The items (products) that this order contains.
          items:
            - type: object
              required:
              - product_id
              - quantity
              properties:
                product_id:
                  description: The id of a product. See /products.
                  type: integer
                quantity:
                  description: The amount of these items that this order contains.
                  type: integer
        status:
          type: string
          enum:
           - awaiting_payment
           - on_hold
           - awaiting_shipment
           - ready_to_pick
  Order:
    name: order
    in: body
    schema:
      allOf:
        - $ref: '#/parameters/NewOrder/schema'
      properties:
        status:
          type: string
          example: "awating_payment"
          enum:
           - awaiting_payment
           - on_hold
           - cancelled
           - awaiting_shipment
           - filtered
           - shipped
           - not_delivered
           - delivered
           - return
           - ready_to_pick
           - picking_list
           - ready_to_pack
           - ready_to_ship
        id:
          readOnly: true
          type: integer
  NewProduct:
    in: body
    name: product
    schema:
      type: object
      required:
        - external_reference
        - title
        # XXX: location?
      properties:
        external_reference:
          type: string
          description: A free-form text to later find and search this product.
        title:
          type: string
          description: A name for this product. This is free-form text, and is only used for display purposes.
        price:
          type: number
          description: This product's price. Insurance coverage will be based on this price.
        currency:
          type: string
          description: The currency for this product's price. Should be ARS, for now.
        image_url:
          type: string
          format: url
          description: A URL to an image that visually identifies this product.
        weight:
          type: number
        height:
          type: number
        length:
          type: number
        width:
          type: number
        # location?
        stock:
          type: integer
          description: The remaining stock for this product.
        extra_data:
          type: object
          description: A free-form JSON field where custom data can be stored for each product.
  Product:
    name: product
    in: body
    schema:
      allOf:
        - $ref: '#/parameters/NewProduct/schema'
      properties:
        id:
          readOnly: true
          type: integer
  User:
    name: user
    in: body
    schema:
      properties:
        id:
          description: The unique id.
        email:
          type: string
          example: "alice@example.com"
        token:
          type: string
          example: biijDg4Jo0S0P3vdGmTLICUnOExFFqJzLJ5QSTzRfLTYvVZgjH
          description: The API token.
        description:
          type: string
          description: A free-form description for this user.
        role:
          type: string
          enum:
            - regular
            - admin
            - shipnow
        # TODO: account:
        avatar_url:
          type: string
          format: url
          description: The URL to an avatar used to idenfity this user.
definitions:
  Order:
    allOf:
      - $ref: '#/parameters/Order/schema'
  NewOrder:
    allOf:
      - $ref: '#/parameters/NewOrder/schema'
  Product:
    allOf:
      - $ref: '#/parameters/Product/schema'
